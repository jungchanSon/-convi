{
  "PageTitle": "Review Buddy 메뉴얼",
  "Title": "Review Buddy",
  "NameDesc": "GitLab에서 간편하게 MR 리뷰받기",
  "Desc": [
    {
      "Title": "1. Gitlab Runner 컨테이너 생성 및 실행",
      "Description": [
      ]
    },
    {
      "Title": "1-1. Gitlab Runner 생성",
      "Image": "/reviewBuddy/img.png",
      "Description": [
        "• Gitlab Runner 생성을 위해 설정 -> CI/CD -> Runner -> New project runner 버튼을 클릭합니다."
      ]
    },
    {
      "Title": "",
      "Image": "/reviewBuddy/img_1.png",
      "Description": [
        "• Runner 실행 태그를 등록합니다. 등록된 태그의 Job을 실행하기 위한 용도입니다."
      ]
    },
    {
      "Title": "",
      "Image": "/reviewBuddy/img_2.png",
      "Description": [
        "runnerTable",
        "• Docker Container에서 Runner를 실행한다면 Docker 실행 환경 플랫폼을 선택하고, Step1 코드 블록 내의 token 정보와 gitlab_url 정보를 복사합니다.",
        "• 해당 정보는 아래 ${gitlab_runner_token}, ${gitlab_url} 값으로 사용됩니다.",
        "ㅤ⸰ Docker Desktop의 디폴트 실행환경은 Linux 입니다.",
        "ㅤ⸰ Docker Container를 사용한다면 컨테이너 생성 및 실행 명령어는 1-2, 1-3에 존재합니다.",
        "• 만약 Docker Container로 동작시키지 않는다면, 실행 환경 OS 플랫폼을 선택하고 1-4 과정으로 건너뛰어 진행합니다.",
        ""
      ]
    },
    {
      "Title": "1-2. Runner 컨테이너 생성 및 실행",
      "Image": "/reviewBuddy/docker-install.gif",
      "Description": [
        "• 해당 명령어를 Runner를 실행시킬 환경(로컬 혹은 운영 환경)에서 실행하여 Runner 컨테이너 생성 및 실행합니다. 사용 중인 터미널 환경에 따라 아래 명령어 중 하나를 실행하세요.",
        "• 만약 위에서 컨테이너로 Runner를 실행하지 않고, OS에서 직접 실행한다면, 해당 1-2, 1-3 과정은 건너뜁니다.",
        "runner-cmd-1"
      ]
    },
    {
      "Title": "1-3. Runner 정보 최초 등록",
      "Image": "/reviewBuddy/docker-config.gif",
      "Description": [
        "• Runner를 Gitlab Repository와 연동하기 위한 최초 정보를 등록합니다. 사용 중인 터미널 환경에 따라 아래 명령어 중 하나를 실행하세요.",
        "• 해당 명령어를 Runner를 실행시킬 환경에서 실행 시, ${gitlab_runner_token} 의 값을 Gitlab Runner Token 값으로 변경해주세요.",
        "• 또한, ${gitlab_url} 의 값도 Gitlab Url 값으로 변경해주세요.",
        "runner-cmd-2"
      ]
    },
    {
      "Title": "",
      "Image": "/reviewBuddy/gitlab-runner-step.png",
      "Description": [
      ]
    },
    {
      "Title": "1-4. (선택) Docker없이 Runner 설치 및 설정하기",
      "Image": "/reviewBuddy/img_5.png",
      "Description": [
        "• Docker 없이 Runner를 설치한다면 다음 명령어 순서를 따릅니다.",
        "• 실행 환경의 플랫폼을 선택하면 해당 플랫폼에 맞춰 Docker Gitlab 설정 명령어가 변경됩니다.",
        "• Gitlab Runner를 먼저 설치하고, 이후 Gitlab 화면의 Step1, Step2, Step3의 명령어를 그대로 실행합니다."
      ]
    },
    {
      "Title": "1-5. Runner 등록 성공 및 확인",
      "Image": "/reviewBuddy/gitlab-runner-create-success.png",
      "Description": [
      ]
    },
    {
      "Title": "2. Gitlab Reposiotry 접근을 위한 AccessToken 발급",
      "Image": "/reviewBuddy/gitlab-accesstoken1.webp",
      "Description": [
        "• Runner에서 Gitlab Repository에 접근하기 위한 엑세스 토큰 발급이 필요합니다.",
        "• Gitlab 설정 -> 엑세스 토큰 -> 신규 토큰 추가를 통한 엑세스 토큰을 발급합니다."
      ]
    },
    {
      "Title": "",
      "Image": "/reviewBuddy/gitlab-accesstoken2.webp",
      "Description": [
        "• 토큰 이름을 임의로 지정하고 그 외 토큰 정보를 선택하여 엑세스 토큰을 생성합니다.",
        "• 생성된 엑세스 토큰 정보를 복사합니다."
      ]
    },
    {
      "Title": "3. Gitlab CI/CD Variables 등록",
      "Image": "/reviewBuddy/gitlab-ci-variables1.webp",
      "Description": [
        "• 이후 Runner에서 코드 리뷰를 위한 환경 변수들을 등록해야합니다.",
        "• Gitlab 설정 -> CI/CD -> Variables -> Add variable을 통해 GITLAB_TOKEN으로 저장합니다.",
        "runnerTable2",
        "• GPT 코드 리뷰를 희망한다면 GPT OPEN API Key를 OPEN_AI_KEY에 저장합니다. 초기 설정은 Gpt이므로 없으면 Pipeline 에러가 발생할 수 있으니, Ollama를 사용 희망시 .gitlab-ci.yml를 수정해주세요."
      ]
    },
    {
      "Title": "",
      "Image": "/reviewBuddy/gitlab-ci-variables2.webp",
      "Description": [
        "• Key 값은 위와 동일하게 각각 <b> GITLAB_TOKEN, OPEN_AI_KEY </b> 지정하고, 토큰의 값 등록이 필요합니다.",
        "ㅤ⸰ Key의 값이 달라지면 오류가 발생합니다."
      ]
    },
    {
      "Title": "4. Gitlab CI 파일 등록",
      "Image": "/reviewBuddy/img_9.png",
      "Description": [
        "• 아래의 코드를 .gitlab-ci.yml 파일로 생성하고, Gitlab Repository 최상위 디렉토리에 넣어주세요.",
        "ㅤ⸰ 파일명은 반드시 '.gitlab-ci.yml'이여야 합니다.",
        "gitlabcicode"
      ]
    },
    {
      "Title": "Gitlab CI 파일 설정",
      "Description": [
        "SettingTable"
      ]
    },
    {
      "Title": "REVIEW_MODEL",
      "Description": [
        "ReviewModelTable"
      ]
    },
    {
      "Title": "RAG_FLAG 동작 차이",
      "Description": [
        "RagFlagTable"
      ]
    },
    {
      "Title": "(선택)5. Docker Image 커스터마이징",
      "Description": [
        "review-buddy 기본 이미지는 review-buddy 디렉토리의 Dockerfile로 구성되어 있습니다.",
        "하지만 팀마다 쓰는 LLM, 라이브러리, 프롬프트 가 다르기 때문에, 필요하다면 Dockerfile, requirements.txt, review_buddy.py를 수정해 전용 이미지를 빌드할 수 있습니다."
      ]
    },
    {
      "Title": "5-1. LLM 교체 / 추가",
      "Description": [
        "모델 크기에 따라 베이스 이미지를 변경하여 용량을 줄이거나 다른 LLM을 사용할 수 있습니다.",
        "예) ollama pull mistral 또는 phi3:mini 다운로드 명령을 Dockerfile에 추가"
      ]
    },
    {
      "Title": "5-2. 추가 패키지 / 도구 설치",
      "Description": [
        "필요한 공통 라이브러리 등을 requirements.txt에 명시하여 도구를 설치할 수 있습니다.",
        "시스템 패키지가 필요하면 Dockerfile에서 apt-get install jq처럼 추가할 수 있습니다."
      ]
    },
    {
      "Title": "5-3. 프롬프트 및 리뷰 로직 수정",
      "Description": [
        "유사도 탐색 개수(K)나 토큰 길이, AI 호출 모델명을 자유롭게 변경",
        "예) review_buddy.py에서 createPrompt()를 변경하고 싶은 프롬프트로 수정"
      ]
    },
    {
      "Title": "5-4. 커스터마이징한 이미지 빌드 & 레지스트리 푸시",
      "Description": [
        "Custom1"
      ]
    },
    {
      "Title": "5-5. 생성한 Image 사용으로 변경",
      "Description": [
        "Custom2",
        "이후 커스터마이징하여 저장된 이미지의 주소로 .gitlab.yml파일의 image: 값을 수정해주세요."
      ]
    }
  ]
}
